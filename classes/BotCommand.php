<?php

namespace TelegramShopBot;

use TelegramShopBot\Database\Manager\ChatManager;
use TelegramShopBot\Database\Manager\CityManager;
use TelegramShopBot\Database\Manager\DistrictManager;
use TelegramShopBot\Database\Manager\OrderManager;
use TelegramShopBot\Database\Manager\ProductManager;
use TelegramShopBot\Entity\Chat;
use TelegramShopBot\Entity\Order;
use TelegramShopBot\Entity\Update;

class BotCommand
{
    // TODO: –¥–æ–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å btc
    private static $btc = false;


    private static $commands = [
        '/start' => [
            'args'     => 0,
            'function' => 'command_start'
        ],
        '/listCity' => [
            'args'     => 0,
            'function' => 'command_listCity'
        ],
        '/city' => [
            'args'     => 1,
            'function' => 'command_city'
        ],
        '/listProducts' => [
            'args'     => 0,
            'function' => 'command_listProducts'
        ],
        '/product' => [
            'args'     => 1,
            'function' => 'command_product'
        ],
        '/buy' => [
            'args'     => 1,
            'function' => 'commandBuy'
        ],
        '/help' => [
            'args'     => 0,
            'function' => 'commandHelp'
        ],
        '/cancel' => [
            'args' => 0,
            'function' => 'command_cancel'
        ],
        '/payment' => [
            'args' => 1,
            'function' => 'commandPayment'
        ],
        '/checkOrder' => [
            'args' => 0,
            'function' => 'commandCheckOrder'
        ],
    ];

    /**
     * @param Update $update
     *
     * @return bool
     */
    public static function handler(Update $update)
    {
        $inputCommand = strtolower($update->getText());
        foreach (self::$commands as $commandName => $function) {
            if (strpos($inputCommand, strtolower($commandName)) === 0) {

                $result = false;
                $funcArgs = explode('_', substr($inputCommand, strlen($commandName)));

                if (count($funcArgs) <= $function['args'] || empty($funcArgs[0])) {
                    if (empty($funcArgs[0])) {
                        $result = call_user_func('self::' . $function['function'], $update);
                    } else {
                        $result = call_user_func('self::' . $function['function'], $update, ...$funcArgs);
                    }
                }

                return $result;
            }
        }

        return false;
    }


    private static function command_start(Update $update)
    {

        Telegram::sendMessage($update->getChat(),
            '<b>' . $update->getChat()->getFirstName() . '</b> , –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ üè™ <b>' . Config::getBotName() . '</b>' .  'üè™'. PHP_EOL .
            '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É.' . PHP_EOL
            );

        if ($update->getChat()->getStatus() !== Chat::STATUS_GET_CITY) {
            ChatManager::update($update->getChat()->setStatus(Chat::STATUS_GET_CITY));
        }

        if (!empty($update->getChat()->getOrder())) {
            OrderManager::delete($update->getChat()->getOrder()->getId());
        }

        return self::command_listCity($update);
    }


    private static function command_listCity(Update $update)
    {
        if ($update->getChat()->getStatus() !== Chat::STATUS_GET_CITY) {
            return false;
        }

        $allCity = CityManager::getAll();
        $message =
            'üè£ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:' . PHP_EOL .
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL;

        foreach ($allCity as $city) {
            $message .=
                'üî∏ <b>' . $city . '</b>' . PHP_EOL .
                '[–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /city' . $city->getId() . ']' . PHP_EOL .
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL;
        }

        Telegram::sendMessage($update->getChat(), $message);

        return true;
    }


    private static function command_city(Update $update, $cityId = null)
    {
        if ($update->getChat()->getStatus() !== Chat::STATUS_GET_CITY) {
            return false;
        }

        $city = CityManager::getById($cityId);

        if (!empty($city)) {
            $update->getChat()->setCity($city);
            $update->getChat()->setStatus(Chat::STATUS_CITY_INSTALLED);
            ChatManager::update($update->getChat());
            self::command_listProducts($update);
        } else {
            Telegram::sendMessage(
                $update->getChat(),
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞'
            );
        }

        return true;
    }


    private static function command_listProducts(Update $update)
    {
        if (!($update->getChat()->getStatus() === Chat::STATUS_CITY_INSTALLED ||
            $update->getChat()->getStatus() === Chat::STATUS_PRODUCT_SELECTED)) {
            Telegram::sendMessage(
                $update->getChat(),
                '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä.' . PHP_EOL .
                '(–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤ –Ω–∞–∂–º–∏—Ç–µ üëâ /listDistrict'
            );

            return false;
        }

        $products = ProductManager::getAll();
        $message =
            'üè£ <b>' . $update->getChat()->getCity() . '</b>' . PHP_EOL .
            PHP_EOL .
            '–¢–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ: ' . PHP_EOL .
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL;

        foreach ($products as $product) {
            $message .=
                'üíä <b>' . $product->getName() . '</b> ' . PHP_EOL .
                'üí∞ –¶–µ–Ω–∞: ' . $product->getPrice() . PHP_EOL .
                '[–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /product' . $product->getId() . ']' . PHP_EOL .
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL;
        }

        $message .=
            PHP_EOL .
            '‚ùå /cancel - —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥';

        Telegram::sendMessage($update->getChat(), $message);

        return true;
    }


    private static function command_product(Update $update, $productId = null)
    {
        if (!($update->getChat()->getStatus() == Chat::STATUS_CITY_INSTALLED ||
            $update->getChat()->getStatus() === Chat::STATUS_PRODUCT_SELECTED)) {
            return false;
        }

        if ($update->getChat()->getStatus() === Chat::STATUS_CITY_INSTALLED) {
            if ($productId != null) {
                $product = ProductManager::getOne($productId);
                if (!empty($product)) {
                    ChatManager::update($update->getChat()->setStatus(Chat::STATUS_PRODUCT_SELECTED));
                    OrderManager::create($update->getChat(), $product);
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }

        $product = $update->getChat()->getOrder()->getProduct();

        $districts = DistrictManager::getAllByCityId($update->getChat()->getCity()->getId());
        $message =
            'üè£ <b>' . $update->getChat()->getCity() . '</b>' . PHP_EOL .
            PHP_EOL .
            'üíä <b>' . $product->getName() . '</b> üíä' . PHP_EOL .
            'üí∞ –¶–µ–Ω–∞: <b>' . $product->getPrice() . '</b> üí∞' . PHP_EOL .
            PHP_EOL .
            'üèÉ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:' . PHP_EOL .
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL;

        foreach ($districts as $district) {
            $message .= 'üîπ –†–∞–π–æ–Ω: <b>' . $district . '</b>' . PHP_EOL .
                '[–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /buy' . $district->getId() . ']' . PHP_EOL .
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL;
        }

        $message .= PHP_EOL;
        $message .= '‚ùå /cancel - –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞';

        Telegram::sendMessage($update->getChat(), $message);

        return true;
    }


    private static function commandBuy(Update $update, $districtId = null)
    {
        if (!($update->getChat()->getStatus() === Chat::STATUS_PRODUCT_SELECTED ||
            $update->getChat()->getStatus() === Chat::STATUS_DISTRICT_SELECTED)) {
            return false;
        }

        $product  = $update->getChat()->getOrder()->getProduct();
        $district = is_null($districtId) ? $update->getChat()->getOrder()->getDistrict() : DistrictManager::getById($districtId);

        if (empty($product) || empty($district) || $district->getCity()->getId() != $update->getChat()->getCity()->getId()) {
            return false;
        }

        $add = (self::$btc === false) ? ('') : (
            '<b>Bitcoin</b>' . PHP_EOL .
            '[–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /paymentBtc]' . PHP_EOL .
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL );

        Telegram::sendMessage($update->getChat(),
            '–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ' . PHP_EOL .
            'üíä <b>' . $product->getName() .'</b> üíä' . PHP_EOL .
            'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>' . $product->getPrice() . '</b> üí∞' . PHP_EOL .
            'üè£ –ì–æ—Ä–æ–¥: <b>' . $update->getChat()->getCity() . '</b>' . PHP_EOL .
            'üèÉ –†–∞–π–æ–Ω: <b>' . $district . '</b>' . PHP_EOL .
            PHP_EOL .
            'üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:' . PHP_EOL .
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL .
            '<b>Qiwi</b>' . PHP_EOL .
            '[–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /paymentQiwi]' . PHP_EOL .
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL .
            $add.
            PHP_EOL.
            '‚ùå /cancel - —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω'
        );

        $update->getChat()->setStatus(Chat::STATUS_DISTRICT_SELECTED);
        ChatManager::update($update->getChat());

        $update->getChat()->getOrder()->setDistrict($district);
        OrderManager::update($update->getChat()->getOrder());

        return true;
    }


    private static function commandHelp(Update $update)
    {
        $strings = explode(PHP_EOL, file_get_contents('commandList.txt'));

        $message = '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:' . PHP_EOL;
        foreach ($strings as $string) {
            $message .= '/' . $string . PHP_EOL;
        }
        Telegram::sendMessage($update->getChat(), $message);
    }


    private static function command_cancel(Update $update)
    {
        switch ($update->getChat()->getStatus()) {
            case Chat::STATUS_CITY_INSTALLED:
                ChatManager::update($update->getChat()->setStatus(Chat::STATUS_GET_CITY));
                self::command_listCity($update);
                break;

            case Chat::STATUS_PRODUCT_SELECTED:
                ChatManager::update($update->getChat()->setStatus(Chat::STATUS_CITY_INSTALLED));
                OrderManager::delete($update->getChat()->getOrder()->getId());
                self::command_listProducts($update);
                break;

            case Chat::STATUS_DISTRICT_SELECTED:
                ChatManager::update($update->getChat()->setStatus(Chat::STATUS_PRODUCT_SELECTED));
                OrderManager::update($update->getChat()->getOrder()->setDistrict(null));
                self::command_product($update);
                break;

            case Chat::STATUS_PAYMENT_SELECTED:
                ChatManager::update($update->getChat()->setStatus(Chat::STATUS_DISTRICT_SELECTED));
                OrderManager::update($update->getChat()->getOrder()
                    ->setPaymentMethod(null)
                    ->setComment(null)
                    ->setPrice(null)
                );
                self::command_buy($update);
                break;

            case Chat::STATUS_PAYD_SUCCESS:
                return false;

            default:
                self::command_start($update);
                break;
        }

        return true;
    }


    private static function commandPayment(Update $update, $method = null)
    {
        if (!($update->getChat()->getStatus() === Chat::STATUS_DISTRICT_SELECTED ||
            $update->getChat()->getStatus() === Chat::STATUS_PAYMENT_SELECTED)) {
            return false;
        }

        $method = strtolower((is_null($method)) ? $update->getChat()->getOrder()->getPaymentMethod() : $method);
        if (!(
            is_null($method) ||
            $method === 'qiwi' ||
            ($method === 'btc' && self::$btc !== false)
        )) {
            return false;
        }

        $order = $update->getChat()->getOrder();
        $comment =
            is_null($order->getComment()) ?
            substr(md5($update->getChat()->getId() . time()), 0, 10) :
            $order->getComment();

        $pay = [
            'qiwi' => [
                'name'     => 'Qiwi',
                'price'    => $order->getProduct()->getPrice(),
                'currency' => '–†–£–ë',
                'account'  => Config::getQiwiNumber()
            ],
            'btc' => [
                'name'  => 'Bitcoin',
                'price' => $order->getProduct()->getPrice() / 150000, // –ö—É—Ä—Å BTC 150000—Ä
                'currency' => 'BTC',
                'account'  => Config::getBtcNumber()
            ]
        ];
        $pay = $pay[$method];

        $message =
            '–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ' . PHP_EOL .
            'üíä <b>' . $order->getProduct()->getName() .'</b> üíä' . PHP_EOL .
            'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>' . $order->getProduct()->getPrice() . '</b> üí∞' . PHP_EOL .
            'üè£ –ì–æ—Ä–æ–¥: <b>' . $update->getChat()->getCity() . '</b>' . PHP_EOL .
            'üèÉ –†–∞–π–æ–Ω: <b>' . $order->getDistrict() . '</b>' . PHP_EOL .
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL .
            PHP_EOL .
            '–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ <b>' . $pay['price'] . ' ' . $pay['currency'] .'</b> –Ω–∞ ' . $pay['name'] . ':' . PHP_EOL .
            '<b>' . $pay['account'] . '</b>' . PHP_EOL .
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <b>' . $comment . '</b>' . PHP_EOL .
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ' . PHP_EOL .
            PHP_EOL .
            '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ üëâ /checkOrder' . PHP_EOL .
            PHP_EOL .
            '‚Äº –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑, –∞ –ø–æ—Å–ª–µ –Ω–∞–∂–º–µ—Ç–µ –æ—Ç–º–µ–Ω—É, —Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞' . PHP_EOL .
            '‚ùå /cancel - –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ ‚Äº'
        ;

        Telegram::sendMessage($update->getChat(), $message);

        OrderManager::update($order
            ->setPaymentMethod($method)
            ->setPrice($pay['price'])
            ->setComment($comment)
        );
        ChatManager::update($update->getChat()->setStatus(Chat::STATUS_PAYMENT_SELECTED));

        return true;
    }


    private static function commandCheckOrder(Update $update) {
        if ($update->getChat()->getStatus() !== Chat::STATUS_PAYMENT_SELECTED) {
            return false;
        }

        $qiwiPay = new QiwiCheckPayment();

        if ($qiwiPay->auth(Config::getQiwiNumber(), Config::getQiwiPassword()) == 0) {
            Telegram::sendMessage($update->getChat(), '–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
            return true;
        }

        $history = $qiwiPay->history(3);
        $order = $update->getChat()->getOrder();

        foreach ($history as $item) {
            if ($item['type'] === 'income' &&
                $item['cash'] === $order->getPrice() &&
                $item['comment'] === $order->getComment()
            ) {
                Telegram::sendMessage($update->getChat(),
                    '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.' . PHP_EOL.
                    '–ö—É—Ä—å–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –û–∂–∏–¥–∞–π—Ç–µ.'
                );
                $update->getChat()->setStatus(Chat::STATUS_PAYD_SUCCESS);
                ChatManager::update($update->getChat());

                return true;
            }
        }

        Telegram::sendMessage($update->getChat(),
            '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç–∞ –æ—Ç –≤–∞—Å –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.' . PHP_EOL .
            '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'
        );

        return true;
    }
}